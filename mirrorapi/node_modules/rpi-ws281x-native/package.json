{
  "name": "rpi-ws281x-native",
  "version": "0.1.2",
  "description": "(raspberry-pi *only*) native bindings to control a strip of WS281x-LEDs with node.js",
  "keywords": [
    "raspberry",
    "ws2811",
    "ws2812",
    "led",
    "hardware"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.33"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/raspberry-node/node-rpi-ws281x-native.git"
  },
  "author": {
    "name": "Martin Schuhfuss",
    "email": "m.schuhfuss@gmail.com"
  },
  "homepage": "https://github.com/raspberry-node/node-rpi-ws281x-native",
  "bugs": "https://github.com/raspberry-node/node-rpi-ws281x-native/issues",
  "license": "MIT",
  "dependencies": {},
  "devDependencies": {},
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "# control ws281x-LEDs with node.js\n\n> if you happen to know C++ and node/V8, I would really appreciate any help and feedback on this module.\n> There is certainly lots of room for improvement.\n\nThis module provides native bindings to the [rpi_ws281x](https://github.com/jgarff/rpi_ws281x)\nlibrary by Jeremy Garff to provide a very basic set of functions to write data to a strip of\nws2811/ws2812 LEDs. **will only run on the Raspberry Pi.**\n\n## setup\n\nthis module is available via npm:\n\n    npm install rpi-ws2812-native\n\nif you prefer installing from source:\n\n    npm install -g node-gyp\n    git clone --recursive https://github.com/raspberry-node/node-rpi-ws281x-native.git\n    cd rpi-ws281x-native\n    node-gyp rebuild\n\n\n## usage\n\nthis module exports only three functions to send data to the LED-String.\n\n```javascript\nexports = {\n    /**\n     * configures PWM and DMA for sending data to the LEDs\n     *\n     * @param numLeds {Number}  number of LEDs to be controlled\n     * @param [options] {Object}  (acutally only tested with default-values)\n     *                            intialization-options for the library\n     *                            (PWM frequency, DMA channel, GPIO)\n     */\n    init: function(numLeds, options) {},\n\n    /**\n     * send data to the LED-strip.\n     *\n     * @param data {Uint32Array}  the pixel-data, 24bit per pixel in\n     *                            RGB-format (0xff0000 is red).\n     */\n    render: function(data) {},\n\n    /**\n     * clears all LEDs, resets the PWM and DMA-parts and deallocates\n     * all internal structures.\n     */\n    reset: function() {}\n};\n```\n\n## testing basic functionality\n\nconnect the WS2812-strip to the raspberry-pi as described [here](https://learn.adafruit.com/neopixels-on-raspberry-pi/wiring)\nand run the command `node examples/rainbow.js <numLeds>`.\nYou should now see some rainbow-colors animation on the LED-strip.\n\n\n## hardware\n\nThere is a guide [over at adafruit.com](https://learn.adafruit.com/neopixels-on-raspberry-pi) on how\nto get the hardware up and running. Essentially, you need the Raspberry Pi, a logic-level converter\nto shift the output-voltage of the GPIO from 3.3V up to 5V (should be fast enough to handle 800kHz,\nthe guide mentions the 74AHCT125, mine is an 74HCT125N) and of course an LED-Strip or other types of WS2812-LEDs.\n\nTo connect all that together, I'd recommend buying a small breadboard and some jumper-wires.\nAlso, consider buing a 5V power-supply that can deliver up to 60mA per LED (so you'll need 6A to fully power 100 LEDs).\nFor smaller applications, a decent USB-charger should do.\n\nYou can buy everything you need at adafruit or any other electronics reseller\n(germany: check [conrad electronic](http://www.conrad.de) or [watterott](http://watterott.com) â€“ this is\nwhere i bought most of my stuff).",
  "readmeFilename": "README.md",
  "_id": "rpi-ws281x-native@0.1.2",
  "dist": {
    "shasum": "902a378837cdef7ddb49112223d1c82fd52654c6"
  },
  "_from": "rpi-ws281x-native@",
  "_resolved": "https://registry.npmjs.org/rpi-ws281x-native/-/rpi-ws281x-native-0.1.2.tgz"
}
